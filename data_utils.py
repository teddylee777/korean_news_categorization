{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import collections\n",
    "import os\n",
    "import pickle\n",
    "import random\n",
    "import urllib\n",
    "from io import open\n",
    "import numpy as np\n",
    "\n",
    "def maybe_download(filename, expected_bytes):\n",
    "    \"\"\"\n",
    "    download text8.zip\n",
    "    :param filename:\n",
    "    :param expected_bytes:\n",
    "    :return:\n",
    "    \"\"\"\n",
    "    url = 'http://mattmahoney.net/dc/'\n",
    "    if not os.path.exists(filename):\n",
    "        print('start downloading...')\n",
    "        filename, _ = urllib.request.urlretrieve(url + filename, filename)\n",
    "    statinfo = os.stat(filename)\n",
    "    if statinfo.st_size == expected_bytes:\n",
    "        print('Found and verified', filename)\n",
    "    else:\n",
    "        print(statinfo.st_size)\n",
    "        raise Exception(\n",
    "            'Failed to verify ' + filename + '. Can you get to it with a browser?')\n",
    "    return filename\n",
    "\n",
    "\n",
    "def read_own_data(filename):\n",
    "    \"\"\"\n",
    "    read your own data.\n",
    "    :param filename:\n",
    "    :return:\n",
    "    \"\"\"\n",
    "    print('reading data...')\n",
    "    with open(filename, 'r', encoding='utf-8') as f:\n",
    "        data = f.read().split()\n",
    "    print('corpus size', len(data))\n",
    "    return data\n",
    "\n",
    "\n",
    "def build_dataset(words, n_words):\n",
    "    \"\"\"\n",
    "    build dataset\n",
    "    :param words: corpus\n",
    "    :param n_words: learn most common n_words\n",
    "    :return:\n",
    "        - data: [word_index]\n",
    "        - count: [ [word_index, word_count], ]\n",
    "        - dictionary: {word_str: word_index}\n",
    "        - reversed_dictionary: {word_index: word_str}\n",
    "    \"\"\"\n",
    "    count = [['UNK', -1]]\n",
    "    count.extend(collections.Counter(words).most_common(n_words - 1))\n",
    "    dictionary = dict()\n",
    "    for word, _ in count:\n",
    "        dictionary[word] = len(dictionary)\n",
    "    data = list()\n",
    "    unk_count = 0\n",
    "    for word in words:\n",
    "        if word in dictionary:\n",
    "            index = dictionary[word]\n",
    "        else:\n",
    "            index = 0  # UNK index is 0\n",
    "            unk_count += 1\n",
    "        data.append(index)\n",
    "    count[0][1] = unk_count\n",
    "    reversed_dictionary = dict(zip(dictionary.values(), dictionary.keys()))\n",
    "    return data, count, dictionary, reversed_dictionary\n",
    "\n",
    "def dataset_tofile(data, count, dictionary, reversed_dictionary):\n",
    "    pickle.dump(data, open(\"data/data.list\", \"wb\"))\n",
    "    pickle.dump(count, open(\"data/count.list\", \"wb\"))\n",
    "    pickle.dump(dictionary, open(\"data/word2index.dict\", \"wb\"))\n",
    "    pickle.dump(reversed_dictionary, open(\"data/index2word.dict\", \"wb\"))\n",
    "\n",
    "def read_fromfile():\n",
    "    data = pickle.load(open(\"data/data.list\", \"rb\"))\n",
    "    count = pickle.load(open(\"data/count.list\", \"rb\"))\n",
    "    dictionary = pickle.load(open(\"data/word2index.dict\", \"rb\"))\n",
    "    reversed_dictionary = pickle.load(open(\"data/index2word.dict\", \"rb\"))\n",
    "    return data, count, dictionary, reversed_dictionary\n",
    "\n",
    "def noise(vocabs, word_count):\n",
    "    \"\"\"\n",
    "    generate noise distribution\n",
    "    :param vocabs:\n",
    "    :param word_count:\n",
    "    :return:\n",
    "    \"\"\"\n",
    "    Z = 0.001\n",
    "    unigram_table = []\n",
    "    num_total_words = sum([c for w, c in word_count])\n",
    "    for vo in vocabs:\n",
    "        unigram_table.extend([vo] * int(((word_count[vo][1]/num_total_words)**0.75)/Z))\n",
    "\n",
    "    print(\"vocabulary size\", len(vocabs))\n",
    "    print(\"unigram_table size:\", len(unigram_table))\n",
    "    return unigram_table\n",
    "\n",
    "\n",
    "class DataPipeline:\n",
    "    def __init__(self, data, vocabs, word_count, data_index=0, use_noise_neg=True):\n",
    "        self.data = data\n",
    "        self.data_index = data_index\n",
    "        if use_noise_neg:\n",
    "            self.unigram_table = noise(vocabs, word_count)\n",
    "        else:\n",
    "            self.unigram_table = vocabs\n",
    "\n",
    "    def get_neg_data(self, batch_size, num, target_inputs):\n",
    "        \"\"\"\n",
    "        sample the negative data. Don't use np.random.choice(), it is very slow.\n",
    "        :param batch_size: int\n",
    "        :param num: int\n",
    "        :param target_inputs: []\n",
    "        :return:\n",
    "        \"\"\"\n",
    "        neg = np.zeros((num))\n",
    "        for i in range(batch_size):\n",
    "            delta = random.sample(self.unigram_table, num)\n",
    "            while target_inputs[i] in delta:\n",
    "                delta = random.sample(self.unigram_table, num)\n",
    "            neg = np.vstack([neg, delta])\n",
    "        return neg[1: batch_size + 1]\n",
    "\n",
    "    def generate_batch(self, batch_size, num_skips, skip_window):\n",
    "        \"\"\"\n",
    "        get the data batch\n",
    "        :param batch_size:\n",
    "        :param num_skips:\n",
    "        :param skip_window:\n",
    "        :return: target batch and context batch\n",
    "        \"\"\"\n",
    "        assert batch_size % num_skips == 0\n",
    "        assert num_skips <= 2 * skip_window\n",
    "        batch = np.ndarray(shape=(batch_size), dtype=np.int32)\n",
    "        labels = np.ndarray(shape=(batch_size), dtype=np.int32)\n",
    "        span = 2 * skip_window + 1  # [ skip_window, target, skip_window ]\n",
    "        buffer = collections.deque(maxlen=span)\n",
    "        for _ in range(span):\n",
    "            buffer.append(self.data[self.data_index])\n",
    "            self.data_index = (self.data_index + 1) % len(self.data)\n",
    "        for i in range(batch_size // num_skips):\n",
    "            target = skip_window\n",
    "            targets_to_avoid = [skip_window]\n",
    "            for j in range(num_skips):\n",
    "                while target in targets_to_avoid:\n",
    "                    target = random.randint(0, span - 1)\n",
    "                targets_to_avoid.append(target)\n",
    "                batch[i * num_skips + j] = buffer[skip_window]\n",
    "                labels[i * num_skips + j] = buffer[target]\n",
    "            buffer.append(self.data[self.data_index])\n",
    "            self.data_index = (self.data_index + 1) % len(self.data)\n",
    "        self.data_index = (self.data_index + len(self.data) - span) % len(self.data)\n",
    "        return batch, labels"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
